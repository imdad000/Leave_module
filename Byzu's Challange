import java.io.*;
import java.util.*;
import java.lang.*; 
class TestClass {
   public static void main(String args[] ) throws Exception {
       Scanner sc=new Scanner(System.in);
       int test=sc.nextInt();
       while(test-->0)
       {
           int n=sc.nextInt();
           String line=sc.next();
           String line1=sc.next();
           int count = 0;
           int value=0;
           HashMap<Character,Integer> map = new HashMap<Character,Integer>();
           HashMap<Character,Integer> map1 = new HashMap<Character,Integer>();
           
           for (int i=0; i<line.length(); i++){
           if(map.containsKey(line.charAt(i))){
               value = map.get(line.charAt(i));
               value ++;
               map.put(line.charAt(i),value);
           }else{
               map.put(line.charAt(i),1);
           }
       }


       for (int i=0; i<line1.length(); i++){
           if(map1.containsKey(line1.charAt(i))){
               value = map1.get(line1.charAt(i));
               value ++;
               map1.put(line1.charAt(i),value);
           }else{
               map1.put(line1.charAt(i),1);
           }
       }
   
   
   
   
   //package nov19;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;

class COOK112B {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FastReader scn = new FastReader();
		PrintWriter out = new PrintWriter(System.out);
		int t = scn.nextInt();
		for (int t1 = 0; t1 < t; t1++) {
			int n=scn.nextInt();
			int m=scn.nextInt();
			char [][] grid1=new char[n][m];
			char [][] grid2=new char[n][m];
			int[][] grid3=new int[n][m];
			int[][] grid4=new int[n][m];
			for(int i=0; i<n; i++)
			{
				grid1[i]=scn.next().toCharArray();
			}
			for(int i=0; i<n; i++)
			{
				grid2[i]=scn.next().toCharArray();
			}
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++)
				{
					char x=grid1[i][j];
					int val=(int)x;
					val=val-48;
					grid3[i][j]=val;
				}
			}
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++)
				{
					char x=grid2[i][j];
					int val=(int)x;
					val=val-48;
					grid4[i][j]=val;
				}
			}
		/*	for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++)
				{
					System.out.print(grid3[i][j]);
				}
				System.out.println();
			}
			System.out.println();
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++)
				{
					System.out.print(grid4[i][j]);
				}
				System.out.println();
			}*/
			int min=Integer.MAX_VALUE;
			for(int dr=-25; dr<=25; dr++)
			{
				for(int dc=-25; dc<=25; dc++)
				{
					int flips=0;
					for(int i=0; i<n; i++)
					{
						for(int j=0; j<m; j++)
						{
							
							
								int newi=i+dr;
								int newj=j+dc;
								if(newi>=0 && newi<n && newj>=0 && newj<m)
								{
								//	System.out.println("Entry"+i+" "+j);
									if(grid3[i][j]!=grid4[newi][newj])
									{
									//	System.out.println(i+" "+j);
										flips++;
									}
								}
								else
								{
									int newvalue=0;
									if(grid3[i][j]!=newvalue)
									{
										flips++;
									}
								}
							
						}
					}
					min=Math.min(min, flips);
				}
			}
			out.println(min);
			
		}
		out.close();

	}

	public static double polygonArea(double X[], double Y[], int n) {
		// Initialize area
		double area = 0.0;

		// Calculate value of shoe-lace formula
		int j = n - 1;
		for (int i = 0; i < n; i++) {
			area += (X[j] + X[i]) * (Y[j] - Y[i]);

			// j is previous vertex to i
			j = i;
		}

		// Return absolute value
		return Math.abs(area / 2.0);
	}

	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

}
       
       
       for ( Character key : map.keySet()){
          if(map1.containsKey(key))
          {
              int v1=map.get(key);
              int v2=map1.get(key);
              if(v1>v2)
              count=count+v2;
              else
              count=count+v1;
          }
          
       }
   System.out.println(count);

            
       }

   }
}
